<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<html>
<head>
    <link href="//camel.apache.org/styles/site.css" rel="stylesheet" type="text/css">
    <link href="//camel.apache.org/styles/type-settings.css" rel="stylesheet" type="text/css">
    <script src="//camel.apache.org/styles/prototype.js" type="text/javascript"></script>
    <script src="//camel.apache.org/styles/rico.js" type="text/javascript"></script>    
    <script src="//camel.apache.org/styles/site.js" type="text/javascript"></script>

    <meta http-equiv="Content-type" content="text/html;charset=UTF-8">

    <style type="text/css">
      .maincontent { overflow:hidden; }
    </style>
    <!--[if IE]>
    <style type="text/css">
      .maincontent { width:100%; }
    </style>
    <![endif]-->


  <link href='//camel.apache.org/styles/highlighter/styles/shCoreCamel.css' rel='stylesheet' type='text/css' />
  <link href='//camel.apache.org/styles/highlighter/styles/shThemeCamel.css' rel='stylesheet' type='text/css' />
  <script src='//camel.apache.org/styles/highlighter/scripts/shCore.js' type='text/javascript'></script>
  <script src='//camel.apache.org/styles/highlighter/scripts/shBrushJava.js' type='text/javascript'></script>
  <script src='//camel.apache.org/styles/highlighter/scripts/shBrushXml.js' type='text/javascript'></script>
  <script src='//camel.apache.org/styles/highlighter/scripts/shBrushPlain.js' type='text/javascript'></script>
  
  <script type="text/javascript">
  SyntaxHighlighter.defaults['toolbar'] = false;
  SyntaxHighlighter.all();
  </script>

    <title>
    Apache Camel: AHC
    </title>
</head>
<body>
<div class="white_box">
<div class="header">
  <div class="header_l">
    <div class="header_r">
    </div>
  </div>
</div>
<div class="content">
  <div class="content_l">
    <div class="content_r">
      <div>
          <!-- Banner -->
<div id="banner-content"><div id="asf_logo">
	<div id="activemq_logo" style="height:108px; background:transparent url(banner.data/apache-camel-7.png) no-repeat scroll left top;">
            <a shape="rect" style="float:left; width:310px;display:block;text-indent:-5000px;text-decoration:none;line-height:140px; margin-top:20px; margin-left:18px;" href="http://camel.apache.org/">Camel</a>
            <a shape="rect" style="float:right; width:180px;display:block;text-indent:-5000px;text-decoration:none;line-height:80px; margin-top:45px; margin-right:10px;" href="http://www.apache.org">Apache</a>
	</div>
</div></div>
          <!-- Banner -->
        <div class="top_red_bar">
          <div id="site-breadcrumbs">
                <!-- Breadcrumbs -->
<a href="index.html">Apache Camel</a>&nbsp;&gt;&nbsp;<a href="documentation.html">Documentation</a>&nbsp;&gt;&nbsp;<a href="components.html">Components</a>&nbsp;&gt;&nbsp;<a href="ahc.html">AHC</a>
          </div>
          <!-- Quicklinks -->
<div id="site-quicklinks"><p><a shape="rect" href="download.html">Download</a> | <a shape="rect" href="javadoc.html">JavaDoc</a> | <a shape="rect" href="source.html">Source</a> | <a shape="rect" href="discussion-forums.html">Forums</a> | <a shape="rect" href="support.html">Support</a></p></div>
          <!-- Quicklinks -->
        </div>

	<table border="0">
	<tbody>
        <tr>
        <td valign="top" width="100%">
<div class="wiki-content maincontent"><h2 id="AHC-AsyncHttpClient(AHC)Component">Async Http Client (AHC) Component</h2><p><strong>Available as of Camel 2.8</strong></p><p>The <strong>ahc:</strong> component provides HTTP based <a shape="rect" href="endpoint.html">endpoints</a> for consuming external HTTP resources (as a client to call external servers using HTTP).<br clear="none"> The component uses the <a shape="rect" class="external-link" href="https://github.com/AsyncHttpClient/async-http-client" rel="nofollow">Async Http Client</a> library.</p><p>Maven users will need to add the following dependency to their <code>pom.xml</code> for this component:</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: xml; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[&lt;dependency&gt;
    &lt;groupId&gt;org.apache.camel&lt;/groupId&gt;
    &lt;artifactId&gt;camel-ahc&lt;/artifactId&gt;
    &lt;version&gt;x.x.x&lt;/version&gt;
    &lt;!-- use the same version as your Camel core version --&gt;
&lt;/dependency&gt;
]]></script>
</div></div><h3 id="AHC-URIformat">URI format</h3><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[ahc:http://hostname[:port][/resourceUri][?options]
ahc:https://hostname[:port][/resourceUri][?options]
]]></script>
</div></div><p>Will by default use port 80 for HTTP and 443 for HTTPS.</p><p>You can append query options to the URI in the following format, <code>?option=value&amp;option=value&amp;...</code></p><h3 id="AHC-AhcEndpointOptions">AhcEndpoint Options</h3><div class="confluenceTableSmall"><div class="table-wrap"><table class="confluenceTable"><tbody><tr><th colspan="1" rowspan="1" class="confluenceTh"><p>Name</p></th><th colspan="1" rowspan="1" class="confluenceTh"><p>Default Value</p></th><th colspan="1" rowspan="1" class="confluenceTh"><p>Description</p></th></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>throwExceptionOnFailure</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>true</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>Option to disable throwing the <code>AhcOperationFailedException</code> in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>bridgeEndpoint</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>false</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>If the option is true, then the Exchange.HTTP_URI header is ignored, and use the endpoint's URI for request. You may also set the <strong>throwExcpetionOnFailure</strong> to be false to let the AhcProducer send all the fault response back.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>transferException</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>false</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>If enabled and an <a shape="rect" href="exchange.html">Exchange</a> failed processing on the consumer side, and if the caused <code>Exception</code> was send back serialized in the response as a <code>application/x-java-serialized-object</code> content type (for example using <a shape="rect" href="jetty.html">Jetty</a> or <a shape="rect" href="servlet.html">SERVLET</a> Camel components). On the producer side the exception will be deserialized and thrown as is, instead of the <code>AhcOperationFailedException</code>. The caused exception is required to be serialized.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>client</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To use a custom <code>com.ning.http.client.AsyncHttpClient</code>.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>clientConfig</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To configure the <code>AsyncHttpClient</code> to use a custom <code>com.ning.http.client.AsyncHttpClientConfig</code> instance. This instance replaces any instance configured at the component level.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>clientConfig.x</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To configure additional properties of the <code>com.ning.http.client.AsyncHttpClientConfig</code> instance used by the endpoint. Note that configuration options set using this parameter will be merged with those set using the <code>clientConfig</code> parameter or the instance set at the component level with properties set using this parameter taking priority.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>clientConfig.realm.x</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><strong>Camel 2.11:</strong> To configure realm properties of the <code>com.ning.http.client.AsyncHttpClientConfig</code> The options which can be used are the options from <code>com.ning.http.client.Realm.RealmBuilder</code>. eg to set scheme, you can configure <code>"clientConfig.realm.scheme=DIGEST"</code></p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>binding</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To use a custom <code>org.apache.camel.component.ahc.AhcBinding</code>.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>sslContextParameters</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><strong>Camel 2.9:</strong> Reference to a <code>org.apache.camel.util.jsse.SSLContextParameters</code> in the <a shape="rect" href="registry.html">Registry</a>.&#160; This reference overrides any configured SSLContextParameters at the component level.&#160; See <a shape="rect" href="#AHC-UsingtheJSSEConfigurationUtility">Using the JSSE Configuration Utility</a>.&#160; Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>bufferSize</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>4096</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><strong>Camel 2.10.3:</strong> The initial in-memory buffer size used when transferring data between Camel and AHC Client.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>connectionClose</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>false</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><strong><strong>Camel 2.18:&#160;</strong></strong>If this option is true, the producer will add a Connection Close header to HTTP Request</p></td></tr></tbody></table></div></div><h3 id="AHC-AhcComponentOptions">AhcComponent Options</h3><div class="confluenceTableSmall"><div class="table-wrap"><table class="confluenceTable"><tbody><tr><th colspan="1" rowspan="1" class="confluenceTh"><p>Name</p></th><th colspan="1" rowspan="1" class="confluenceTh"><p>Default Value</p></th><th colspan="1" rowspan="1" class="confluenceTh"><p>Description</p></th></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>client</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To use a custom <code>com.ning.http.client.AsyncHttpClient</code>.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>clientConfig</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To configure the <code>AsyncHttpClient</code> to use a custom <code>com.ning.http.client.AsyncHttpClientConfig</code>.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>binding</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>To use a custom <code>org.apache.camel.component.ahc.AhcBinding</code>.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>sslContextParameters</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>null</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><strong>Camel 2.9:</strong> To configure custom SSL/TLS configuration options at the component level.&#160; See&#160; <a shape="rect" href="#AHC-UsingtheJSSEConfigurationUtility">Using the JSSE Configuration Utility</a> for more details.&#160; Note that configuring this option will override any SSL/TLS configuration options provided through the clientConfig option at the endpoint or component level.</p></td></tr></tbody></table></div></div><p>Notice that setting any of the options on the <code>AhcComponent</code> will propagate those options to <code>AhcEndpoint}}s being created. However the {{AhcEndpoint</code> can also configure/override a custom option. Options set on endpoints will always take precedence over options from the <code>AhcComponent</code>.</p><h3 id="AHC-MessageHeaders">Message Headers</h3><div class="confluenceTableSmall"><div class="table-wrap"><table class="confluenceTable"><tbody><tr><th colspan="1" rowspan="1" class="confluenceTh"><p>Name</p></th><th colspan="1" rowspan="1" class="confluenceTh"><p>Type</p></th><th colspan="1" rowspan="1" class="confluenceTh"><p>Description</p></th></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.HTTP_URI</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>String</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>URI to call. Will override existing URI set directly on the endpoint.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.HTTP_PATH</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>String</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>Request URI's path, the header will be used to build the request URI with the HTTP_URI. If the path is start with "/", http producer will try to find the relative path based on the Exchange.HTTP_BASE_URI header or the <code>exchange.getFromEndpoint().getEndpointUri();</code></p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.HTTP_QUERY</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>String</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><strong>Camel 2.11 onwards:</strong> URI parameters. Will override existing URI parameters set directly on the endpoint.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.HTTP_RESPONSE_CODE</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>int</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>The HTTP response code from the external server. Is 200 for OK.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.HTTP_CHARACTER_ENCODING</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>String</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>Character encoding.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.CONTENT_TYPE</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>String</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>The HTTP content type. Is set on both the IN and OUT message to provide a content type, such as <code>text/html</code>.</p></td></tr><tr><td colspan="1" rowspan="1" class="confluenceTd"><p><code>Exchange.CONTENT_ENCODING</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p><code>String</code></p></td><td colspan="1" rowspan="1" class="confluenceTd"><p>The HTTP content encoding. Is set on both the IN and OUT message to provide a content encoding, such as <code>gzip</code>.</p></td></tr></tbody></table></div></div><h3 id="AHC-MessageBody">Message Body</h3><p>Camel will store the HTTP response from the external server on the OUT body. All headers from the IN message will be copied to the OUT message, so headers are preserved during routing. Additionally Camel will add the HTTP response headers as well to the OUT message headers.</p><h3 id="AHC-Responsecode">Response code</h3><p>Camel will handle according to the HTTP response code:</p><ul class="alternate"><li>Response code is in the range 100..299, Camel regards it as a success response.</li><li>Response code is in the range 300..399, Camel regards it as a redirection response and will throw a <code>AhcOperationFailedException</code> with the information.</li><li><p>Response code is 400+, Camel regards it as an external server failure and will throw a <code>AhcOperationFailedException</code> with the information.</p><div class="confluence-information-macro confluence-information-macro-tip"><p class="title">throwExceptionOnFailure</p><span class="aui-icon aui-icon-small aui-iconfont-approve confluence-information-macro-icon"></span><div class="confluence-information-macro-body"><p>The option, <code>throwExceptionOnFailure</code>, can be set to <code>false</code> to prevent the <code>AhcOperationFailedException</code> from being thrown for failed response codes. This allows you to get any response from the remote server.</p></div></div></li></ul><h3 id="AHC-AhcOperationFailedException">AhcOperationFailedException</h3><p>This exception contains the following information:</p><ul class="alternate"><li>The HTTP status code</li><li>The HTTP status line (text of the status code)</li><li>Redirect location, if server returned a redirect</li><li>Response body as a <code>java.lang.String</code>, if server provided a body as response</li></ul><h3 id="AHC-CallingusingGETorPOST">Calling using GET or POST</h3><p>The following algorithm is used to determine if either <code>GET</code> or <code>POST</code> HTTP method should be used:<br clear="none"> 1. Use method provided in header.<br clear="none"> 2. <code>GET</code> if query string is provided in header.<br clear="none"> 3. <code>GET</code> if endpoint is configured with a query string.<br clear="none"> 4. <code>POST</code> if there is data to send (body is not null).<br clear="none"> 5. <code>GET</code> otherwise.</p><h3 id="AHC-ConfiguringURItocall">Configuring URI to call</h3><p>You can set the HTTP producer's URI directly form the endpoint URI. In the route below, Camel will call out to the external server, <code>oldhost</code>, using HTTP.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[from(&quot;direct:start&quot;)
	    .to(&quot;ahc:http://oldhost&quot;);
]]></script>
</div></div><p>And the equivalent Spring sample:</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: xml; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[&lt;camelContext xmlns=&quot;http://activemq.apache.org/camel/schema/spring&quot;&gt;
  &lt;route&gt;
    &lt;from uri=&quot;direct:start&quot;/&gt;
    &lt;to uri=&quot;ahc:http://oldhost&quot;/&gt;
  &lt;/route&gt;
&lt;/camelContext&gt;
]]></script>
</div></div><p>You can override the HTTP endpoint URI by adding a header with the key, <code>Exchange.HTTP_URI</code>, on the message.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[from(&quot;direct:start&quot;)
    .setHeader(Exchange.HTTP_URI, constant(&quot;http://newhost&quot;))
    .to(&quot;ahc:http://oldhost&quot;);
]]></script>
</div></div><h3 id="AHC-ConfiguringURIParameters">Configuring URI Parameters</h3><p>The <strong>ahc</strong> producer supports URI parameters to be sent to the HTTP server. The URI parameters can either be set directly on the endpoint URI or as a header with the key <code>Exchange.HTTP_QUERY</code> on the message.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[from(&quot;direct:start&quot;)
	    .to(&quot;ahc:http://oldhost?order=123&amp;detail=short&quot;);
]]></script>
</div></div><p>Or options provided in a header:</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[from(&quot;direct:start&quot;)
            .setHeader(Exchange.HTTP_QUERY, constant(&quot;order=123&amp;detail=short&quot;))
	    .to(&quot;ahc:http://oldhost&quot;);
]]></script>
</div></div><h3 id="AHC-Howtosetthehttpmethod(GET/POST/PUT/DELETE/HEAD/OPTIONS/TRACE)totheHTTPproducer">How to set the http method (GET/POST/PUT/DELETE/HEAD/OPTIONS/TRACE) to the HTTP producer</h3><p>The HTTP component provides a way to set the HTTP request method by setting the message header. Here is an example;</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[from(&quot;direct:start&quot;)
            .setHeader(Exchange.HTTP_METHOD, constant(&quot;POST&quot;))
	    .to(&quot;ahc:http://www.google.com&quot;)
            .to(&quot;mock:results&quot;);
]]></script>
</div></div><p>And the equivalent Spring sample:</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: xml; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[&lt;camelContext xmlns=&quot;http://activemq.apache.org/camel/schema/spring&quot;&gt;
  &lt;route&gt;
    &lt;from uri=&quot;direct:start&quot;/&gt;
    &lt;setHeader headerName=&quot;CamelHttpMethod&quot;&gt;
        &lt;constant&gt;POST&lt;/constant&gt;
    &lt;/setHeader&gt;
    &lt;to uri=&quot;ahc:http://www.google.com&quot;/&gt;
    &lt;to uri=&quot;mock:results&quot;/&gt;
  &lt;/route&gt;
&lt;/camelContext&gt;
]]></script>
</div></div><h3 id="AHC-Configuringcharset">Configuring charset</h3><p>If you are using <code>POST</code> to send data you can configure the <code>charset</code> using the <code>Exchange</code> property:</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[exchange.setProperty(Exchange.CHARSET_NAME, &quot;iso-8859-1&quot;);
]]></script>
</div></div><h4 id="AHC-URIParametersfromtheendpointURI">URI Parameters from the endpoint URI</h4><p>In this sample we have the complete URI endpoint that is just what you would have typed in a web browser. Multiple URI parameters can of course be set using the <code>&amp;</code> character as separator, just as you would in the web browser. Camel does no tricks here.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[// we query for Camel at the Google page
template.sendBody(&quot;ahc:http://www.google.com/search?q=Camel&quot;, null);
]]></script>
</div></div><h4 id="AHC-URIParametersfromtheMessage">URI Parameters from the Message</h4><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[Map headers = new HashMap();
headers.put(Exchange.HTTP_QUERY, &quot;q=Camel&amp;lr=lang_en&quot;);
// we query for Camel and English language at Google
template.sendBody(&quot;ahc:http://www.google.com/search&quot;, null, headers);
]]></script>
</div></div><p>In the header value above notice that it should <strong>not</strong> be prefixed with <code>?</code> and you can separate parameters as usual with the <code>&amp;</code> char.</p><h4 id="AHC-GettingtheResponseCode">Getting the Response Code</h4><p>You can get the HTTP response code from the AHC component by getting the value from the Out message header with <code>Exchange.HTTP_RESPONSE_CODE</code>.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[Exchange exchange = template.send(&quot;ahc:http://www.google.com/search&quot;, new Processor() {
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setHeader(Exchange.HTTP_QUERY, constant(&quot;hl=en&amp;q=activemq&quot;));
            }
   });
   Message out = exchange.getOut();
   int responseCode = out.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class);
]]></script>
</div></div><h3 id="AHC-ConfiguringAsyncHttpClient">Configuring AsyncHttpClient</h3><p>The <code>AsyncHttpClient</code> client uses a <code>AsyncHttpClientConfig</code> to configure the client. See the documentation at<br clear="none"> <a shape="rect" class="external-link" href="http://github.com/sonatype/async-http-client" rel="nofollow">Async Http Client</a> for more details.</p><p>In Camel <strong>2.8</strong>, configuration is limited to using the builder pattern provided by <code>AsyncHttpClientConfig.Builder</code>. In Camel 2.8, the <code>AsyncHttpClientConfig</code> doesn't support getters/setters so its not easy to create/configure using a Spring bean style (eg the &lt;bean&gt; tag in the XML file).</p><p>The example below shows how to use a builder to create the <code>AsyncHttpClientConfig</code> which we configure on the <code>AhcComponent</code>.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[
// create a client config builder
AsyncHttpClientConfig.Builder builder = new AsyncHttpClientConfig.Builder();
// use the builder to set the options we want, in this case we want to follow redirects and try
// at most 3 retries to send a request to the host
AsyncHttpClientConfig config = builder.setFollowRedirect(true).setMaxRequestRetry(3).build();

// lookup AhcComponent
AhcComponent component = context.getComponent(&quot;ahc&quot;, AhcComponent.class);
// and set our custom client config to be used
component.setClientConfig(config);
]]></script>
</div></div>In Camel <strong>2.9</strong>, the AHC component uses Async HTTP library 1.6.4. This newer version provides added support for plain bean style configuration. The <code>AsyncHttpClientConfigBean</code> class provides getters and setters for the configuration options available in <code>AsyncHttpClientConfig</code>. An instance of <code>AsyncHttpClientConfigBean</code> may be passed directly to the AHC component or referenced in an endpoint URI using the <code>clientConfig</code> URI parameter.<p>Also available in Camel <strong>2.9</strong> is the ability to set configuration options directly in the URI. URI parameters starting with "clientConfig." can be used to set the various configurable properties of <code>AsyncHttpClientConfig</code>. The properties specified in the endpoint URI are merged with those specified in the configuration referenced by the "clientConfig" URI parameter with those being set using the "clientConfig." parameter taking priority. The <code>AsyncHttpClientConfig</code> instance referenced is always copied for each endpoint such that settings on one endpoint will remain independent of settings on any previously created endpoints. The example below shows how to configure the AHC component using the "clientConfig." type URI parameters.</p><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[from(&quot;direct:start&quot;)
    .to(&quot;ahc:http://localhost:8080/foo?clientConfig.maxRequestRetry=3&amp;clientConfig.followRedirects=true&quot;)
]]></script>
</div></div><h3 id="AHC-SSLSupport(HTTPS)">SSL Support (HTTPS)</h3><h5 id="AHC-UsingtheJSSEConfigurationUtility">Using the JSSE Configuration Utility</h5><p>As of Camel 2.9, the AHC component supports SSL/TLS configuration through the <a shape="rect" href="camel-configuration-utilities.html">Camel JSSE Configuration Utility</a>.&#160; This utility greatly decreases the amount of component specific code you need to write and is configurable at the endpoint and component levels.&#160; The following examples demonstrate how to use the utility with the AHC component.</p><h6 id="AHC-Programmaticconfigurationofthecomponent">Programmatic configuration of the component</h6><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: java; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[KeyStoreParameters ksp = new KeyStoreParameters();
ksp.setResource(&quot;/users/home/server/keystore.jks&quot;);
ksp.setPassword(&quot;keystorePassword&quot;);

KeyManagersParameters kmp = new KeyManagersParameters();
kmp.setKeyStore(ksp);
kmp.setKeyPassword(&quot;keyPassword&quot;);

SSLContextParameters scp = new SSLContextParameters();
scp.setKeyManagers(kmp);

AhcComponent component = context.getComponent(&quot;ahc&quot;, AhcComponent.class);
component.setSslContextParameters(scp));
]]></script>
</div></div><h6 id="AHC-SpringDSLbasedconfigurationofendpoint">Spring DSL based configuration of endpoint</h6><div class="code panel pdl" style="border-width: 1px;"><div class="codeContent panelContent pdl">
<script class="brush: xml; gutter: false; theme: Default" type="syntaxhighlighter"><![CDATA[...
  &lt;camel:sslContextParameters
      id=&quot;sslContextParameters&quot;&gt;
    &lt;camel:keyManagers
        keyPassword=&quot;keyPassword&quot;&gt;
      &lt;camel:keyStore
          resource=&quot;/users/home/server/keystore.jks&quot;
          password=&quot;keystorePassword&quot;/&gt;
    &lt;/camel:keyManagers&gt;
  &lt;/camel:sslContextParameters&gt;...
...
  &lt;to uri=&quot;ahc:https://localhost/foo?sslContextParameters=#sslContextParameters&quot;/&gt;
...
]]></script>
</div></div><p></p><h3 id="AHC-SeeAlso">See Also</h3>
<ul><li><a shape="rect" href="configuring-camel.html">Configuring Camel</a></li><li><a shape="rect" href="component.html">Component</a></li><li><a shape="rect" href="endpoint.html">Endpoint</a></li><li><a shape="rect" href="getting-started.html">Getting Started</a></li></ul><ul class="alternate"><li><a shape="rect" href="jetty.html">Jetty</a></li><li><a shape="rect" href="http.html">HTTP</a></li><li><a shape="rect" href="http4.html">HTTP4</a></li></ul></div>
        </td>
        <td valign="top">
          <div class="navigation">
            <div class="navigation_top">
                <!-- NavigationBar -->
<div class="navigation_bottom" id="navigation_bottom"><h3 id="Navigation-Overview"><a shape="rect" href="overview.html">Overview</a></h3><ul class="alternate"><li><a shape="rect" href="index.html">Home</a></li><li><a shape="rect" href="download.html">Download</a></li><li><a shape="rect" href="getting-started.html">Getting Started</a></li><li><a shape="rect" href="faq.html">FAQ</a></li></ul><h3 id="Navigation-Documentation"><a shape="rect" href="documentation.html">Documentation</a></h3><ul class="alternate"><li><a shape="rect" href="user-guide.html">User Guide</a></li><li><a shape="rect" href="manual.html">Manual</a></li><li><a shape="rect" href="books.html">Books</a></li><li><a shape="rect" href="tutorials.html">Tutorials</a></li><li><a shape="rect" href="examples.html">Examples</a></li><li><a shape="rect" href="cookbook.html">Cookbook</a></li><li><a shape="rect" href="architecture.html">Architecture</a></li><li><a shape="rect" href="enterprise-integration-patterns.html">Enterprise Integration Patterns</a></li><li><a shape="rect" href="dsl.html">DSL</a></li><li><a shape="rect" href="components.html">Components</a></li><li><a shape="rect" href="data-format.html">Data Format</a></li><li><a shape="rect" href="languages.html">Languages</a></li><li><a shape="rect" href="security.html">Security</a></li><li><a shape="rect" href="security-advisories.html">Security Advisories</a></li></ul><h3 id="Navigation-Search">Search</h3><form enctype="application/x-www-form-urlencoded" method="get" id="cse-search-box" action="http://www.google.com/cse">
  <div>
    <input type="hidden" name="cx" value="007878419884033443453:m5nhvy4hmyq">
    <input type="hidden" name="ie" value="UTF-8">
    <input type="text" name="q" size="21">
    <input type="submit" name="sa" value="Search">
  </div>
</form>
<script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=cse-search-box&amp;lang=en"></script><h3 id="Navigation-Community"><a shape="rect" href="community.html">Community</a></h3><ul class="alternate"><li><a shape="rect" href="support.html">Support</a></li><li><a shape="rect" href="contributing.html">Contributing</a></li><li><a shape="rect" href="discussion-forums.html">Discussion Forums</a></li><li><a shape="rect" href="mailing-lists.html">Mailing Lists</a></li><li><a shape="rect" href="user-stories.html">User Stories</a></li><li><a shape="rect" href="news.html">News</a></li><li><a shape="rect" href="articles.html">Articles</a></li><li><a shape="rect" href="site.html">Site</a></li><li><a shape="rect" href="team.html">Team</a></li><li><a shape="rect" class="external-link" href="http://camel-extra.googlecode.com/" rel="nofollow">Camel Extra</a></li></ul><h3 id="Navigation-Developers"><a shape="rect" href="developers.html">Developers</a></h3><ul class="alternate"><li><a shape="rect" href="developers.html">Developer Guide</a></li><li><a shape="rect" href="source.html">Source</a></li><li><a shape="rect" href="building.html">Building</a></li><li><a shape="rect" href="javadoc.html">JavaDoc</a></li><li><a shape="rect" href="irc-room.html">IRC Room</a></li></ul><h3 id="Navigation-ApacheSoftwareFoundation">Apache Software Foundation</h3><ul class="alternate"><li><a shape="rect" class="external-link" href="http://www.apache.org/licenses/">License</a></li><li><a shape="rect" class="external-link" href="http://www.apache.org/foundation/sponsorship.html">Sponsorship</a></li><li><a shape="rect" class="external-link" href="http://www.apache.org/foundation/thanks.html">Thanks</a></li><li><a shape="rect" class="external-link" href="http://www.apache.org/security/">Security</a></li></ul></div>
                <!-- NavigationBar -->
            </div>
          </div>
        </td>
        </tr>
	</tbody>
        </table>


        <div class="bottom_red_bar"></div>
      </div>
    </div>
  </div>
</div>
<div class="black_box">
<div class="footer">
  <div class="footer_l">
    <div class="footer_r">
      <div>
        <a href="$base/privacy-policy.html">Privacy Policy</a> -
        (<a href="https://cwiki.apache.org/confluence/pages/editpage.action?pageId=26804727">edit page</a>)
   	 (<a href="https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=26804727&amp;showComments=true&amp;showCommentArea=true#addcomment">add comment</a>)
      </div>
    </div>
  </div>
</div>
</div>
</div>
<div class="design_attribution">
&copy; 2004-2015 The Apache Software Foundation.
<br>          
Apache Camel, Camel, Apache, the Apache feather logo, and the Apache Camel project logo are trademarks of The Apache Software Foundation.  All other marks mentioned may be trademarks or registered trademarks of their respective owners.
<br>
<a href="http://hiramchirino.com">Graphic Design By Hiram</a>
</div>

<!-- Camel committers that would like access to the Analytics, send a note to private@camel.apache.org -->
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25976253-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>


